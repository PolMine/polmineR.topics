% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cooccurrences.R
\docType{methods}
\name{cooccurrences,TopicModel-method}
\alias{cooccurrences,TopicModel-method}
\alias{cooccurrences,matrix-method}
\title{Get topic cooccurrences.}
\usage{
\S4method{cooccurrences}{TopicModel}(.Object, k, regex = NULL,
  docs = NULL, renumber = NULL, progress = TRUE, verbose = TRUE)

\S4method{cooccurrences}{matrix}(.Object, regex = NULL, docs = NULL,
  renumber = NULL, progress = TRUE, verbose = TRUE)
}
\arguments{
\item{.Object}{Either an object inheriting from the \code{TopicModel} class
(such as \code{LDA_Gibbs}), or a \code{matrix} with the topics present in
documents. If \code{.Object} is a \code{matrix}, each column is expected to
represent the top k topics present in a document. The \code{matrix}
returned by the \code{topics}-method from the \code{topicmodels} package
was used to develop the method, but document-term-matrices generated other
tools may work as well.}

\item{k}{An \code{integer} value, the \code{k} first topics to consider when
deriving the document-topic-matrix from a trained topicmodel.}

\item{regex}{If not \code{NULL} (default), the procedure will be limited to
document names matched by the regular expression stated by \code{regex}.}

\item{docs}{If not \code{NULL}, the procedure will be limited to documents
matching the character string.}

\item{renumber}{If not \code{NULL} (the default), an \code{integer} vector
(length = number of topics) supplying new topic numbers.}

\item{progress}{A \code{logical} value.}

\item{verbose}{A \code{logical} value.}
}
\description{
Get topic cooccurrences.
}
\examples{
data(BE_lda, BE_labels)
dt <- cooccurrences(BE_lda, k = 3L)
topics_to_drop <- grep("^\\\\(.*?\\\\)$", BE_labels)
dt_min <- dt[chisquare >= 10.83][!a \%in\% topics_to_drop][!b \%in\% topics_to_drop]
dt_min[, "a_label" := BE_labels[ dt_min[["a"]] ] ]
dt_min[, "b_label" := BE_labels[ dt_min[["b"]] ] ]

if (requireNamespace("igraph")){
g <- igraph::graph_from_data_frame(
  d = data.frame(
    from = dt_min[["a_label"]],
    to = dt_min[["b_label"]],
    n = dt_min[["count_coi"]],
    stringsAsFactors = FALSE
  ),
  directed = TRUE
)
g <- igraph::as.undirected(g, mode = "collapse")
if (interactive()){
  plot.igraph(
    g, shape = "square", vertex.color = "steelblue",
    label = V(g)$name, label.family = 11, label.cex = 0.5
  )
}
}
}
