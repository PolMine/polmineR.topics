% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mallet.R
\name{mallet_make_instance_list}
\alias{mallet_make_instance_list}
\alias{as_LDA}
\alias{mallet_instance_list_store}
\alias{mallet_instance_list_load}
\alias{mallet_load_topicmodel}
\title{Interface to mallet topicmodelling.}
\usage{
mallet_make_instance_list(x, p_attribute = "word",
  terms_to_drop = tm::stopwords("de"), mc = TRUE, verbose = TRUE)

as_LDA(x, verbose = TRUE, beta = NULL, gamma = NULL)

mallet_instance_list_store(x, filename = tempfile())

mallet_instance_list_load(filename)

mallet_load_topicmodel(filename)
}
\arguments{
\item{x}{A \code{partition_bundle} object.}

\item{p_attribute}{The p_attribute to use, typically "word" or "lemma".}

\item{terms_to_drop}{stopwords}

\item{mc}{A \code{logical} value, whether to use multicore.}

\item{verbose}{A \code{logical} value, whether to be verbose.}

\item{beta}{The beta matrix for a topic model.}

\item{gamma}{The gamma matrix for a topic model.}

\item{filename}{Where to store the Java-object.}

\item{...}{further parameters}
}
\description{
Functionality to support the following workflow (see examples): (a) Turn
\code{partition_bundle}-object into mallet instance list, (b) store the
resulting \code{jobjRef}-object, (c) run mallet topic modelling and (d)
turn ParallelTopicModel Java object into \code{LDA_Gibbs} object from
package \code{topicmodels}.
}
\details{
The \code{as_LDA()}-function will turn an estimated topic model
  prepared using 'mallet' into a \code{LDA_Gibbs} object as defined in the
  \code{topicmodels} package. This may be useful for using topic model
  evaluation tools available for the \code{LDA_Gibbs} class, but not for the
  immediate output of malled topicmodelling. Note that the gamma matrix is
  normalized and smoothed, the beta matrix is the logarithmized matrix of
  normalized and smoothed values obtained from the input mallet topic model.

The function \code{mallet_instance_list_load} will load a Java
  InstanceList object that has been saved to disk (e.g. by using the
  \code{mallet_instance_list_store} function). The return value is a
  \code{jobjRef} object. Internally, the function reuses code of the function
  \code{load.mallet.instances} from the R package \code{mallet}.
}
\examples{
 
# Preparations: Create instance list

polmineR::use("polmineR")
speeches <- polmineR::as.speeches("GERMAPARLMINI", s_attribute_name = "speaker")

if (requireNamespace("rJava")){
  # options(java.parameters = "-Xmx4g")
  library(rJava)
  .jinit()
  # We need to put the jars from mallet 2.0 on the classpath because
  # only the newer mallet version (not the one included in mallet R package)
  # has method ParallelTopicModel$getDocumentTopics() needed by as_LDA
  .jaddClassPath("/opt/mallet-2.0.8/class") # after .jinit()
  .jaddClassPath("/opt/mallet-2.0.8/lib/mallet-deps.jar")
  instance_list <- topicanalysis::mallet_make_instance_list(speeches)
  instancefile <- mallet_instance_list_store(instance_list)
}

# Option 1: Run mallet from R using mallet package

if (requireNamespace("mallet")){
  lda <- mallet::MalletLDA(num.topics = 20)
  lda$loadDocuments(instance_list)
  lda$setAlphaOptimization(20, 50)
  lda$train(100)
}

# Option 2: Use ParallelTopicModel class - has write()-method

if (requireNamespace("mallet")){
  destfile <- tempfile()
  lda <- rJava::.jnew("cc/mallet/topics/ParallelTopicModel", 25L, 5.1, 0.1)
  lda$addInstances(instance_list)
  lda$setNumThreads(1L)
  lda$setTopicDisplay(50L, 10L)
  lda$setNumIterations(150L)
  lda$estimate()
  lda$write(rJava::.jnew("java/io/File", destfile))
}

# Load topicmodel and turn it into LDA_Gibbs

mallet_lda <- mallet_load_topicmodel(destfile)
\dontrun{
topicmodels_lda <- as_LDA(mallet_lda)
}

}
