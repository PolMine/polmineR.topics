% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mallet.R
\name{mallet_make_instance_list}
\alias{mallet_make_instance_list}
\alias{mallet_cmd}
\alias{mallet_as_LDA_Gibbs}
\alias{mallet_load_word_weights}
\alias{mallet_load_results}
\alias{mallet_instance_list_store}
\alias{mallet_topicmodel_load}
\title{Interface to mallet topicmodelling.}
\usage{
mallet_make_instance_list(x, p_attribute = "word",
  terms_to_drop = tm::stopwords("de"), mc = TRUE, verbose = TRUE)

mallet_cmd(mallet_bin_dir, sourcefile, target_dir, topwords = 50,
  topics = 50, iterations = 2000, threads = 1)

mallet_as_LDA_Gibbs(x, modeldir)

mallet_load_word_weights(filename)

mallet_load_results(modeldir)

mallet_instance_list_store(x, filename = tempfile())

mallet_topicmodel_load(filename)
}
\arguments{
\item{x}{An object to process (HaHaHa).}

\item{p_attribute}{The p_attribute to use, typically "word" or "lemma".}

\item{terms_to_drop}{stopwords}

\item{mc}{A \code{logical} value, whether to use multicore.}

\item{verbose}{A \code{logical} value, whether to be verbose.}

\item{mallet_bin_dir}{The directory where the executable 'mallet' resides.}

\item{sourcefile}{File to which an instance list has been saved.}

\item{target_dir}{Directory where results will be saved.}

\item{topwords}{...}

\item{topics}{The number of topics the topic model shall have.}

\item{iterations}{Number of iterations to perform.}

\item{threads}{Number of threads to use.}

\item{modeldir}{The director where a model computed by mallet is stored.}

\item{filename}{Where to store the Java-object.}

\item{...}{further parameters}
}
\description{
Turn \code{partition_bundle} into a mallet object (instance list). The typical 
workflow will be as follows (see example):
(1) Turn \code{partition_bundle}-object into mallet instance list, (2a) store the
resulting \code{jobjRef}-object locally using \code{java_object_store}, create mallet command
with \code{mallet_cmd}, and run mallet from the command line; alternativelly (2b) run
mallet topic modelling from within R.
}
\details{
The \code{mallet_cmd} function will return a command to be executed
  in a terminal that will prepare a topic model with the input parameters.
}
\examples{
 
polmineR::use("polmineR")
speeches <- polmineR::as.speeches("GERMAPARLMINI", s_attribute_name = "speaker")

if (requireNamespace("rJava")){
  library(rJava)
  instance_list <- mallet_make_instance_list(speeches)
}

# Workflow 1: Run mallet from R using mallet package

if (requireNamespace("mallet")){
  engine <- mallet::MalletLDA(num.topics = 20)
  engine$loadDocuments(instance_list)
  engine$setAlphaOptimization(20, 50)
  engine$train(2000)
}

# Save instance list to disk and run mallet binary from command line

instancefile <- mallet_instance_list_store(instance_list, filename = tempfile()) # output to a tempfile
destdir <- tempdir()
cmd <- mallet_cmd(
  mallet_bin_dir = "/opt/mallet-2.0.8/bin",
  sourcefile = instancefile,
  threads = 1,
  target_dir = destdir
)
system(cmd)
mallet_lda <- mallet_topicmodel_load(file.path(destdir, "model.bin"))
y <- mallet_as_LDA_Gibbs(mallet_lda, modeldir = destdir)
}
